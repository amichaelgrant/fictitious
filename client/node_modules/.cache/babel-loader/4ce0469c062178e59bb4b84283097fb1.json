{"ast":null,"code":"function deserialize(str) {\n  try {\n    return JSON.parse(str);\n  } catch (ex) {\n    return [];\n  }\n}\n\n;\n\nfunction serialize(obj) {\n  try {\n    return JSON.stringify(obj);\n  } catch (ex) {\n    return \"[]\";\n  }\n}\n\n;\n\nfunction addItem(item) {\n  const items = deserialize(localStorage.cart || \"[]\");\n  const existing = items.find(itm => itm.id === item.id);\n  if (existing) return;\n  item.quantity = 1;\n  items.push(item);\n  localStorage.cart = serialize(items);\n  window.dispatchEvent(new Event(\"storage\"));\n}\n\n;\n\nfunction removeItem(item) {\n  const items = deserialize(localStorage.cart || \"[]\");\n  const filtered = items.filter(itm => {\n    return itm.id !== item.id;\n  });\n  console.log(\"filtered: \", filtered);\n  localStorage.cart = serialize(filtered);\n  window.dispatchEvent(new Event(\"storage\"));\n}\n\n;\n\nfunction updateItem(item, quantity) {\n  const items = deserialize(localStorage.cart || \"[]\");\n  items.forEach(itm => {\n    if (itm.id === item.id) {\n      itm = item;\n    }\n\n    ;\n  });\n  localStorage.cart = serialize(items);\n  window.dispatchEvent(new Event(\"storage\"));\n}\n\n;\n\nfunction listItems() {\n  const items = deserialize(localStorage.cart || \"[]\");\n  return items;\n}\n\n;\n\nfunction clearCart() {\n  localStorage.clear();\n  window.dispatchEvent(new Event(\"storage\"));\n}\n\n;\n\nfunction subscribeToCart(callback) {\n  window.addEventListener(\"storage\", callback);\n}\n\n;\nexport { addItem, removeItem, updateItem, listItems, clearCart, subscribeToCart };","map":{"version":3,"sources":["/ubuntu/fictitious/client/src/components/product/CartStorage.js"],"names":["deserialize","str","JSON","parse","ex","serialize","obj","stringify","addItem","item","items","localStorage","cart","existing","find","itm","id","quantity","push","window","dispatchEvent","Event","removeItem","filtered","filter","console","log","updateItem","forEach","listItems","clearCart","clear","subscribeToCart","callback","addEventListener"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,GAArB,EAAyB;AACxB,MAAG;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAP;AACA,GAFD,CAEC,OAAMG,EAAN,EAAS;AACT,WAAO,EAAP;AACA;AACD;;AAAA;;AACD,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACtB,MAAG;AACF,WAAOJ,IAAI,CAACK,SAAL,CAAeD,GAAf,CAAP;AACA,GAFD,CAEC,OAAMF,EAAN,EAAS;AACT,WAAO,IAAP;AACA;AACD;;AAAA;;AAED,SAASI,OAAT,CAAiBC,IAAjB,EAAsB;AACrB,QAAMC,KAAK,GAAGV,WAAW,CAACW,YAAY,CAACC,IAAb,IAAqB,IAAtB,CAAzB;AACA,QAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAWC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWP,IAAI,CAACO,EAAlC,CAAjB;AACA,MAAGH,QAAH,EAAa;AAEbJ,EAAAA,IAAI,CAACQ,QAAL,GAAgB,CAAhB;AACAP,EAAAA,KAAK,CAACQ,IAAN,CAAWT,IAAX;AACAE,EAAAA,YAAY,CAACC,IAAb,GAAoBP,SAAS,CAACK,KAAD,CAA7B;AACAS,EAAAA,MAAM,CAACC,aAAP,CAAqB,IAAIC,KAAJ,CAAU,SAAV,CAArB;AACA;;AAAA;;AACD,SAASC,UAAT,CAAoBb,IAApB,EAAyB;AACxB,QAAMC,KAAK,GAAGV,WAAW,CAACW,YAAY,CAACC,IAAb,IAAqB,IAAtB,CAAzB;AACA,QAAMW,QAAQ,GAAGb,KAAK,CAACc,MAAN,CAAcT,GAAD,IAAS;AACtC,WAAOA,GAAG,CAACC,EAAJ,KAAWP,IAAI,CAACO,EAAvB;AACA,GAFgB,CAAjB;AAGAS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,QAA1B;AACAZ,EAAAA,YAAY,CAACC,IAAb,GAAoBP,SAAS,CAACkB,QAAD,CAA7B;AACAJ,EAAAA,MAAM,CAACC,aAAP,CAAqB,IAAIC,KAAJ,CAAU,SAAV,CAArB;AACA;;AAAA;;AACD,SAASM,UAAT,CAAoBlB,IAApB,EAA0BQ,QAA1B,EAAmC;AAClC,QAAMP,KAAK,GAAGV,WAAW,CAACW,YAAY,CAACC,IAAb,IAAqB,IAAtB,CAAzB;AACAF,EAAAA,KAAK,CAACkB,OAAN,CAAeb,GAAD,IAAS;AACtB,QAAGA,GAAG,CAACC,EAAJ,KAAWP,IAAI,CAACO,EAAnB,EAAsB;AACrBD,MAAAA,GAAG,GAAGN,IAAN;AACA;;AAAA;AACD,GAJD;AAKAE,EAAAA,YAAY,CAACC,IAAb,GAAoBP,SAAS,CAACK,KAAD,CAA7B;AACAS,EAAAA,MAAM,CAACC,aAAP,CAAqB,IAAIC,KAAJ,CAAU,SAAV,CAArB;AACA;;AAAA;;AACD,SAASQ,SAAT,GAAqB;AACpB,QAAMnB,KAAK,GAAGV,WAAW,CAACW,YAAY,CAACC,IAAb,IAAqB,IAAtB,CAAzB;AACA,SAAOF,KAAP;AACA;;AAAA;;AACD,SAASoB,SAAT,GAAoB;AACnBnB,EAAAA,YAAY,CAACoB,KAAb;AACAZ,EAAAA,MAAM,CAACC,aAAP,CAAqB,IAAIC,KAAJ,CAAU,SAAV,CAArB;AACA;;AAAA;;AACD,SAASW,eAAT,CAAyBC,QAAzB,EAAkC;AACjCd,EAAAA,MAAM,CAACe,gBAAP,CAAwB,SAAxB,EAAmCD,QAAnC;AACA;;AAAA;AAED,SACCzB,OADD,EAECc,UAFD,EAGCK,UAHD,EAICE,SAJD,EAKCC,SALD,EAMCE,eAND","sourcesContent":["function deserialize(str){\n\ttry{\n\t\treturn JSON.parse(str);\n\t}catch(ex){\n\t\treturn [];\n\t}\n};\nfunction serialize(obj){\n\ttry{\n\t\treturn JSON.stringify(obj);\n\t}catch(ex){\n\t\treturn \"[]\";\n\t}\n};\n\nfunction addItem(item){\n\tconst items = deserialize(localStorage.cart || \"[]\");\n\tconst existing = items.find(itm => itm.id === item.id);\n\tif(existing) return;\n\t\n\titem.quantity = 1;\n\titems.push(item);\n\tlocalStorage.cart = serialize(items);\n\twindow.dispatchEvent(new Event(\"storage\"));\n};\nfunction removeItem(item){\n\tconst items = deserialize(localStorage.cart || \"[]\");\n\tconst filtered = items.filter((itm) => {\n\t\treturn itm.id !== item.id;\n\t});\n\tconsole.log(\"filtered: \", filtered);\n\tlocalStorage.cart = serialize(filtered);\n\twindow.dispatchEvent(new Event(\"storage\"));\n};\nfunction updateItem(item, quantity){\n\tconst items = deserialize(localStorage.cart || \"[]\");\n\titems.forEach((itm) => {\n\t\tif(itm.id === item.id){\n\t\t\titm = item;\n\t\t};\n\t});\n\tlocalStorage.cart = serialize(items);\n\twindow.dispatchEvent(new Event(\"storage\"));\n};\nfunction listItems() {\n\tconst items = deserialize(localStorage.cart || \"[]\");\n\treturn items;\n};\nfunction clearCart(){\n\tlocalStorage.clear();\n\twindow.dispatchEvent(new Event(\"storage\"));\n};\nfunction subscribeToCart(callback){\n\twindow.addEventListener(\"storage\", callback);\n};\n\nexport {\n\taddItem,\n\tremoveItem,\n\tupdateItem,\n\tlistItems,\n\tclearCart,\n\tsubscribeToCart\n};"]},"metadata":{},"sourceType":"module"}